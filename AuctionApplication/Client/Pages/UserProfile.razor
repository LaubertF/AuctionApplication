@using AuctionApplication.Client.Services
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json
@using System.Text.Json.Serialization
@using AuctionApplication.Shared
@using AuctionApplication.Client.Services
@inject AppStateService appState
@attribute [Authorize]
@page "/profile"

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@attribute [Authorize]
@inject HttpClient Http

@if (appState != null && appState.ToastMessage != null)
{
    <div class="d-flex justify-content-center alert alert-@appState.ToastType alert-dismissible fade show" role="alert">
        @appState.ToastMessage
        <button type="button" class="btn-close" @onclick="() => CloseAppState(appState)"></button>
    </div>
}

<h3 class="fw-bold mb-4">Your profile</h3>
<div class="container">
    <div class="row g-5">
        <div class="col-12 col-lg-4">
            <div class="card shadow">
                <div class="card-body">
                    <h5 class="card-title fw-bold mb-4">My information</h5>
                    <fieldset disabled>
                        <label for="email">Email</label>
                        <input type="text" class="form-control" id="email" placeholder="Email" value="@user.Name" required>
                    </fieldset>
                    <label for="firstName">First name</label>
                    <input type="text" class="form-control" id="firstName" placeholder="First name" @bind="firstName" required>
                    <label for="lastName">Last name</label>
                    <input type="text" class="form-control" id="lastName" placeholder="Last name" @bind="lastName" required>
                </div>
                <div class="card-footer d-flex justify-content-center">
                    <button class="btn-sm btn-outline-primary ms-2" @onclick="@(e => SubmitForm(firstName, lastName))" >Submit</button>
                </div>
            </div>
            <div class="card shadow mt-5">
                <div class="card-body">
                    <h5 class="card-title fw-bold mb-4">My Auctions</h5>
                    <table class="table table-hover align-middle">
                        <thead>
                        <tr>
                            <th scope="col">Auction</th>
                            <th scope="col">Status</th>
                        </tr>
                        </thead>
                        <tbody>
                        @if (ownedAuctions != null)
                        {
                            @foreach (var ownedAuction in ownedAuctions)
                            {
                                myAuctionCounter++;
                                <tr>
                                    <td><a class="link-dark" href="/auction/detail/@ownedAuction.Id">@ownedAuction.NameOfProduct</a></td>
                                    @if (!@ownedAuction.IsClosed)
                                    {
                                        <td><span class="badge rounded-pill bg-primary">Ongoing</span></td>
                                    }
                                    else
                                    {
                                        <td><span class="badge rounded-pill bg-secondary">Finished</span></td>
                                    }
                                </tr>
                            }
                            if (myAuctionCounter == 0)
                            {
                                <h6 class="mb-4">You haven't created any auction!</h6>
                            }
                        }
                        else if (myAuctionsLoading)
                        {
                            <h6 class="mb-4">Loading auctions...</h6>
                        }
                        else
                        {
                            <h6 class="mb-4">You haven't created any auction!</h6>
                        }
                        
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-12 col-lg-8">
            <div class="card shadow card-scale-sm">
                <div class="card-body">
                    <h5 class="card-title fw-bold mb-4">Auctions won</h5>
                    <table class="table table-hover align-middle">
                        <thead>
                            <tr>
                                <th scope="col">Auction</th>
                                <th scope="col">Price</th>
                                <th scope="col">Paid</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                        @if (wins != null)
                        {
                            @foreach (var win in wins)
                            {
                                winsCounter++;
                                <tr>
                                    <td><a class="link-dark" href="/auction/detail/@win.AuctionId">@win.NameOfProduct</a></td>
                                    <td>@win.Value</td>
                                    @if (@win.State == PaymentState.New)
                                    {
                                        <td><i class="bi bi-x-circle icon-red"></i></td>
                                        <td><a class="btn btn-sm btn-warning button-round ms-2" type="submit" href="/auction/detail/@win.AuctionId/payment">Pay</a></td>
                                    }
                                    else
                                    {
                                        <td><i class="bi bi-check-circle icon-green"></i></td>
                                        <td></td>
                                    }
                                </tr>
                            }
                            if (winsCounter == 0)
                            {
                                <h6 class="mb-4">You haven't won an auction yet!</h6>
                            }
                        }
                        else if (winsLoading)
                        {
                            <h6 class="mb-4">Loading auctions...</h6>
                        }
                        else
                        {
                            <h6 class="mb-4">You haven't won an auction yet!</h6>
                        }
                        
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
    </div>
</div>


@code {
    private IList<WinsDto>? wins;
    private IList<AuctionApplication.Shared.Auction>? ownedAuctions;
    private User? user = new User();
    private string? firstName;
    private string? lastName;
    private bool winsLoading = true;
    private int winsCounter = 0;
    private bool myAuctionsLoading = true;
    private int myAuctionCounter = 0;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfo();
        await LoadWins();
        await LoadMyAuctions();
    }

    private async Task LoadWins()
    {
        try
        {
            var response = await Http.GetAsync("/User/Wins");
            if (response.IsSuccessStatusCode)
            {
                var contentStream = await response.Content.ReadAsStreamAsync();
                wins = await JsonSerializer.DeserializeAsync<IList<WinsDto>>(contentStream, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true, // Make property names case-insensitive
                    Converters = { new JsonStringEnumConverter() } // Handle enum serialization/deserialization
                });
            }
            winsLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Wins exception");
        }
    }

    private async Task LoadUserInfo()
    {
        try
        {
            var response = await Http.GetAsync("/User");
            if (response.IsSuccessStatusCode)
            {
                var contentStream = await response.Content.ReadAsStreamAsync();
                user = await JsonSerializer.DeserializeAsync<User>(contentStream, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true, // Make property names case-insensitive
                    Converters = { new JsonStringEnumConverter() } // Handle enum serialization/deserialization
                });
            }
            firstName = user.FirstName;
            lastName = user.LastName;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Wins exception");
        }
    }
    
    private async Task LoadMyAuctions()
    {
        try
        {
            var response = await Http.GetAsync("/User/Owner");
            if (response.IsSuccessStatusCode)
            {
                var contentStream = await response.Content.ReadAsStreamAsync();
                ownedAuctions = await JsonSerializer.DeserializeAsync<IList<AuctionApplication.Shared.Auction>>(contentStream, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true, // Make property names case-insensitive
                    Converters = { new JsonStringEnumConverter() } // Handle enum serialization/deserialization
                });
            }
            myAuctionsLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Owned Auctions exception");
        }
    }

    private async Task SubmitForm(string nameFirst, string nameLast)
    {
        var response = await Http.PutAsJsonAsync("/User/Current",new FullName(nameFirst, nameLast));
        if (response.IsSuccessStatusCode)
        {
            appState.ToastMessage = "User information has been changed";
            appState.ToastType = "success";
        }
        await LoadUserInfo();
    }


    private void CloseAppState(AppStateService toast)
    {
        appState.ToastMessage = null;
        InvokeAsync(StateHasChanged);
    }
}
