@page "/auction/feed"
@using AuctionApplication.Shared
@using System.Net
@using System.Text.Json
@using System.Text.Json.Serialization
@attribute [Authorize]
@inject HttpClient Http
@using AuctionApplication.Client.Services
@inject NavigationManager NavigationManager
@inject AppStateService appState

<h3 class="fw-bold mb-4">Explore Items</h3>

<div class="container">
    <div class="pos-f-t">
        <div class="collapse" id="navbarToggleExternalContent">
            <div class="bg-light element-round p-3 mt-4 mb-1">
                <h6 class="card-title fw-bold mb-3">Categories</h6>
                <div class="row row-cols-auto g-1">
                    <div class="col">
                        <button class="btn-sm btn-outline-danger button-round ms-2" @onclick="@(e => FilterByCategory("clear"))">Show All</button>
                    </div>
                    @foreach (AuctionCategory category in categories)
                    {
                        <div class="col">
                            <button class="btn-sm btn-outline-primary button-round ms-2" @onclick="@(e => FilterByCategory(category.Name))">@category.Name</button>
                        </div>
                    }
                </div>
            </div>
        </div>
        <nav class="navbar navbar-special navbar-dark justify-content-between p-3 m-2 shadow" style="background-color: #e3f2fd">
            <button class="button-outline btn-outline-primary navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarToggleExternalContent" aria-controls="navbarToggleExternalContent" aria-expanded="false" aria-label="Toggle navigation">
                <i class="bi bi-funnel"></i>
            </button>
            <div class="row row-cols-auto g-1">
                <div class="col">
                    <input class="form-control mr-sm-2" type="search" @bind="searchFilter" placeholder="@searchPlaceholder" aria-label="Search">
                </div>
                @if (searchFilterFlag)
                {
                    <div class="col">
                        <button class="btn button-outline-danger btn-outline-danger ms-1" type="submit" @onclick="@(e => FilterByName("clear"))"><i class="bi bi-x-circle"></i></button>
                    </div>
                }
                <div class="col">
                    <button class="btn button-outline btn-outline-primary ms-1" type="submit" @onclick="@(e => FilterByName("filter"))"><i class="bi bi-search"></i></button>
                </div>
            </div>
        </nav>
    </div>
    
    @if (auctions != null)
    {
        
        <div class="row g-5">
            @foreach (var auction in auctions)
            {
                @if (auction.IsClosed == false)
                {
                    noAuctionsCounter++;
                    <div class="col-12 col-md-6 col-xl-3">
                        <div class="card shadow">
                            
                            <div class="card-header text-center justify-content-center align-items-center">
                                <h6 class="card-title fw-bold"><i class="bi bi-clock-history mx-2"></i>15:23:02</h6>
                            </div>

                            @if (auction.ProductImages.Count == 0)
                            {
                                <a class="ratio ratio-1x1" href="/auction/detail/@auction.Id"><img src="placeholder.png" alt="Flower" class="card-img-top"/></a>
                            }
                            else
                            {
                                @for (var j = 0; j < auction.ProductImages.Count; j++)
                                {
                                    <a class="ratio ratio-1x1" href="/auction/detail/@auction.Id"><img src="@auction.ProductImages[j].Base64" alt="Flower" class="card-img-top"/></a>
                                    break;
                                }
                            }

                            <div class="card-body">
                                <h6 class="card-title fw-bold mb-4">@auction.NameOfProduct</h6>
                                <div class="row">
                                    <div class="col-6">
                                        <h6 class="card-subtitle text-small text-muted text-start">Category</h6>
                                    </div>
                                    <div class="col-6">
                                        <h6 class="card-subtitle text-small text-end">@auction.Category.Name</h6>
                                    </div>
                                </div>
                                <hr class="bg-primary border-2 border-top border-primary"/>
                                <div class="row">
                                    <div class="col-6">
                                        <h6 class="card-subtitle text-small text-muted text-start">Starting Price</h6>
                                    </div>
                                    <div class="col-6">
                                        <h6 class="card-subtitle text-small fw-bolder text-end">@auction.StartingPrice €</h6>
                                    </div>
                                </div>
                                <hr class="bg-primary border-2 border-top border-primary"/>
                                <div class="row">
                                    <div class="col-6">
                                        <h6 class="card-subtitle text-small text-muted text-start">Seller</h6>
                                    </div>
                                    <div class="col-6">
                                        <h6 class="card-subtitle text-small text-end">@auction.Owner.Name</h6>
                                    </div>
                                </div>
                            </div>
                            @* <div class="card-footer"> *@
                            @*     <small class="text-extra-small text-muted">Last updated 10 mins ago</small> *@
                            @* </div> *@
                        </div>
                    </div>
                }
            }
            @if (noAuctionsCounter == 0)
            {
                <h6 class="card-title fw-bold mb-4">There are no active auctions at the moment.</h6>
            }
        </div>
    }
    else if (loadingFlag)
    {
        <h6 class="card-title fw-bold mb-4">Loading...</h6>
    }
    else if (auctions == null && !loadingFlag)
    {
        <h6 class="card-title fw-bold mb-4">There are no active auctions at the moment.</h6>
    }
</div>



@code {
    private IList<Auction>? auctions;
    List<AuctionCategory>? categories = new List<AuctionCategory>();
    bool loadingFlag = true;
    int noAuctionsCounter = 0;
    string searchFilter = string.Empty;
    bool searchFilterFlag = false;
    string searchPlaceholder = "Search";

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadAllAuctions();
    }

    private async Task LoadAllAuctions()
    {
        try
        {
            var response = await Http.GetAsync("/Auctions");
            if (response.IsSuccessStatusCode)
            {
                var contentStream = await response.Content.ReadAsStreamAsync();
    // var rawContent = await response.Content.ReadAsStringAsync();
                auctions = await JsonSerializer.DeserializeAsync<IList<Auction>>(contentStream, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true, // Make property names case-insensitive
                    Converters = { new JsonStringEnumConverter() } // Handle enum serialization/deserialization
                });
                if (auctions == null)
                {
                    loadingFlag = false;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("CATCH");
            Console.WriteLine(ex);
        }
    }
    
    private async Task LoadAuctionsByCategory(string name)
    {
        try
        {
            var response = await Http.GetAsync($"/Auctions/Category/{name}");
            if (response.IsSuccessStatusCode)
            {
                var contentStream = await response.Content.ReadAsStreamAsync();
                auctions = await JsonSerializer.DeserializeAsync<IList<Auction>>(contentStream, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true, // Make property names case-insensitive
                    Converters = { new JsonStringEnumConverter() } // Handle enum serialization/deserialization
                });
                if (auctions == null)
                {
                    loadingFlag = false;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("CATCH");
            Console.WriteLine(ex);
        }
    }
    
    private async Task LoadAuctionsByName(string name)
    {
        try
        {
            var response = await Http.GetAsync($"/Auctions/{name}");
            if (response.IsSuccessStatusCode)
            {
                var contentStream = await response.Content.ReadAsStreamAsync();
                auctions = await JsonSerializer.DeserializeAsync<IList<Auction>>(contentStream, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true, // Make property names case-insensitive
                    Converters = { new JsonStringEnumConverter() } // Handle enum serialization/deserialization
                });
                if (auctions == null)
                {
                    loadingFlag = false;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("CATCH");
            Console.WriteLine(ex);
        }
    }
    
    private async Task LoadCategories()
    {
        var response = await Http.GetAsync($"/Auctions/Categories");
        var content = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {
            categories = JsonSerializer.Deserialize<List<AuctionCategory>>(content, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true, // Make property names case-insensitive
                Converters = { new JsonStringEnumConverter() } // Handle enum serialization/deserialization
            });
        }
    }
    
    private async Task FilterByCategory(string name)
    {
        if (name == "clear")
        {
            await LoadAllAuctions();
        }
        else
        {
            await LoadAuctionsByCategory(name);
        }
    }
    
    private async Task FilterByName(string clearFlag)
    {
        if (clearFlag == "clear")
        {
            await LoadAllAuctions();
            searchFilterFlag = false;
            searchPlaceholder = "Search";
        }
        else
        {
            if (searchFilter != string.Empty)
            {
                await LoadAuctionsByName(searchFilter);
                searchFilterFlag = true;
                searchPlaceholder = searchFilter;
            }
        }
    }
}