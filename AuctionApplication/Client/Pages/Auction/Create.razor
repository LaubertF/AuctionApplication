@page "/auction/create"
@using AuctionApplication.Shared
@using AuctionApplication.Client.Services
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AppStateService appState
@attribute [Authorize]

@foreach (Toast toast in toasts)
{
    @if (toast.Show == "page")
    {
        <div class="d-flex justify-content-center alert alert-@toast.Type alert-dismissible fade show" role="alert">
            @toast.Message
            <button type="button" class="btn-close" @onclick="() => CloseToast(toast)"></button>
        </div>
    }
}

<div class="d-flex justify-content-center">
    <h2>Create new auction</h2>
</div>

<EditForm Model="@auction" OnSubmit=@FormSubmitted class="pt-5">
    <DataAnnotationsValidator/>
    <div class="container-fluid">
        <div class="row justify-content-start">
            <div class="col-lg-7 col-sm-12">
                <div class="row py-1">
                    <div class="form-floating">
                        <InputText id="title" @bind-Value="@auction.NameOfProduct" class="form-control" placeholder></InputText>
                        <label for="title" class="ms-3">Title *</label>
                        <ValidationMessage For="() => auction.NameOfProduct"/>
                    </div>
                </div>
                <div class="row py-1">
                    <div class="form-floating">
                        <InputTextArea id="description" @bind-Value="@auction.Description" class="form-control" placeholder
                                       style="height: 20rem">
                        </InputTextArea>
                        <label for="description" class="ms-3">Description *</label>
                        <ValidationMessage For="() => auction.Description"/>
                    </div>
                </div>
                <div class="row py-1">
                    <div class="col-12">
                        <div class="form-floating">
                            <InputSelect id="category" @bind-Value="@auction.Category.Name" class="form-select" placeholder>
                                @foreach (AuctionCategory category in categories)
                                {
                                    <option value="@category.Name">@category.Name</option>
                                }
                            </InputSelect>
                            <label for="start-date" class="">Category *</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-5 col-sm-12">
                <div class="row py-1">
                    <div class="col-6">
                        <div class="form-floating">
                            <InputDate Type="InputDateType.DateTimeLocal" id="start-date" @bind-Value="@auction.StartInclusive"
                                       class="form-control" placeholder>
                            </InputDate>
                            <label for="start-date" class="">Start date *</label>
                            <ValidationMessage For="() => auction.StartInclusive"/>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="form-floating">
                            <InputDate Type="InputDateType.DateTimeLocal" id="end-date" @bind-Value="@auction.EndInclusive"
                                       class="form-control" placeholder>
                            </InputDate>
                            <label for="end-date" class="">End date *</label>
                            <ValidationMessage For="() => auction.EndInclusive"/>
                        </div>
                    </div>
                </div>
                <div class="row py-1">
                    <div class="col-6">
                        <div class="form-floating">
                            <InputNumber id="start-price" @bind-Value=@auction.StartingPrice @bind-Value:format="F2" class="form-control" placeholder/>
                            <label for="start-price" class="">Starting price (€) *</label>
                            <ValidationMessage For="() => auction.StartingPrice"/>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="form-floating">
                            <InputNumber id="end-price" @bind-Value=@auction.BuyoutPrice @bind-Value:format="F2" class="form-control" placeholder/>
                            <label for="end-price" class="">Buyout price (€)</label>
                            <ValidationMessage For="() => auction.BuyoutPrice"/>
                        </div>
                    </div>

                </div>
                <div class="row py-1">
                    <div class="col-6">
                        <label for="images" class="form-label">Choose images *</label>
                        <InputFile id="images" class="form-control form-control-sm" multiple
                                   accept="image/png, image/jpeg, image/gif" OnChange="OnImageChange">
                        </InputFile>  
                        @if (imageChange && auction.ProductImages.Count == 0)
                        {
                            <div class="validation-message">At least one product image is required.</div>
                        }
                    </div>
                </div>
                <div class="row py-1">
                    @if (auction.ProductImages != null && auction.ProductImages.Count > 0)
                    {
                        <div id="carouselCreateImages" class="carousel slide" data-bs-ride="carousel">
                            <div class="carousel-indicators">
                                @for (var i = 0; i < auction.ProductImages.Count; i++)
                                {
                                    <button type="button" data-bs-target="#carouselDetailImagescarouselCreateImages"
                                            data-bs-slide-to="@i"
                                            class="@(i == 0 ? "active" : "")"
                                            aria-current="@(i == 0 ? "true" : "")"
                                            aria-label="Slide @(i + 1)">
                                    </button>
                                }
                            </div>
                            <div class="carousel-inner">
                                @for (var j = 0; j < auction.ProductImages.Count; j++)
                                {
                                    <div class="carousel-item @(j == 0 ? "active" : "")">
                                        <img src="@auction.ProductImages[j].Base64" class="d-block w-100" alt="Auction image @(j + 1)">
                                    </div>
                                }
                            </div>
                            <button class="carousel-control-prev" type="button" data-bs-target="#carouselCreateImages" data-bs-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Previous</span>
                            </button>
                            <button class="carousel-control-next" type="button" data-bs-target="#carouselCreateImages" data-bs-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Next</span>
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>


    <div class="container-fluid pt-5">
        <div class="form-group">
            <input type="submit" value="Submit" class="btn btn-primary"/>
        </div>
    </div>
</EditForm>

@code {
    Auction auction = new Auction { Category = new AuctionCategory { Name = "Other" } };
    List<AuctionCategory>? categories = new List<AuctionCategory>();
    private List<Toast> toasts = new List<Toast>();
    Boolean imageChange = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDefaultAuction();
        await LoadCategories();
    }
    
    private void CloseToast(Toast toast)
    {
        toasts.Remove(toast);
        InvokeAsync(StateHasChanged);
    }
    
    private async Task OnImageChange(InputFileChangeEventArgs e)
    {
        imageChange = true;
        auction.ProductImages = new List<ProductImage>();
        foreach (var file in e.GetMultipleFiles())
        {
            var imageFile = file;
            var buffer = new byte[imageFile.Size];
            if (file.Size > 512000)
            {
                IBrowserFile resized = null;
                var maxWidth = 1500;
                while (resized == null)
                {
                    resized = await file.RequestImageFileAsync(file.ContentType, maxWidth, int.MaxValue);
                    if (resized.Size > 512000)
                    {
                        resized = null;
                        maxWidth -= 100;
                    }
                }
                await resized.OpenReadStream().ReadAsync(buffer);
            }
            else
            {
                await file.OpenReadStream().ReadAsync(buffer);
            }
            var imageDataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
            auction.ProductImages.Add(new ProductImage { Base64 = imageDataUrl });
        }
        
    }

    private async Task FormSubmitted(EditContext editContext)
    {
        bool formIsValid = editContext.Validate();
        imageChange = true;
        bool reqImage = auction.ProductImages != null && auction.ProductImages.Count > 0;
        if (formIsValid && reqImage)
        {
            var response = await Http.PostAsJsonAsync("/Auctions/Create", auction);
            var responseContent = await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode)
            {
                appState.ToastMessage = "Auction was successfully created.";
                appState.ToastType = "success";
                NavigationManager.NavigateTo($"/auction/detail/{responseContent}");
            }
            else
            {
                toasts.Add(new Toast { Type = "danger", Show = "page", Message = responseContent });
            }
        }
    }
    
    private async Task LoadDefaultAuction()
    {
        var response = await Http.GetAsync($"/Auctions/New");
        var content = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {
            auction = JsonSerializer.Deserialize<Auction>(content, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true, // Make property names case-insensitive
                Converters = { new JsonStringEnumConverter() } // Handle enum serialization/deserialization
            });
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task LoadCategories()
    {
        var response = await Http.GetAsync($"/Auctions/Categories");
        var content = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {
            categories = JsonSerializer.Deserialize<List<AuctionCategory>>(content, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true, // Make property names case-insensitive
                Converters = { new JsonStringEnumConverter() } // Handle enum serialization/deserialization
            });
        }
    }


}