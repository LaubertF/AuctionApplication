@page "/admin/categories"
@using AuctionApplication.Shared
@using AuctionApplication.Client.Services
@using System.Text.Json
@using System.Text.Json.Serialization
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http


@foreach (Toast toast in toasts)
{
    @if (toast.Show == "page")
    {
        <div class="d-flex justify-content-center alert alert-@toast.Type alert-dismissible fade show" role="alert">
            @toast.Message
            <button type="button" class="btn-close" @onclick="() => CloseToast(toast)"></button>
        </div>
    }
}


<h3>Categories</h3>


<div class="table-responsive">
    <table class="table table-sm">
        <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col"></th>
        </tr>
        </thead>
        <tbody>


        @foreach (var category in categories)
        {
            <tr>
                <td>
                    <span>@category.Name</span>
                </td>
                <th scope="row">
                    <div class="p-1">
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCategory(category.Name)">Delete</button>
                    </div>
                </th>
            </tr>
        }
        </tbody>
    </table>
</div>

<div>
    <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#newCategory">Add new category</button>
</div>

<div class="modal fade" id="newCategory" tabindex="-1" aria-labelledby="newCategoryLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="newCategoryLabel">New category</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @foreach (Toast toast in toasts)
                    {
                        @if (toast.Show == "modal")
                        {
                            <div class="d-flex justify-content-center alert alert-@toast.Type alert-dismissible fade show" role="alert">
                                @toast.Message
                                <button type="button" class="btn-close" @onclick="() => CloseToast(toast)"></button>
                            </div>
                        }
                    }
                    <div class="form-group">
                        <label>Category name</label>
                         <input class="form-control form-control-sm" type="text" @bind="newCategory.Name"/>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" @onclick="() => AddCategory(newCategory)">Add category</button>
                </div>
        </div>
    </div>
</div>

@code {
    private IList<AuctionCategory> categories = new List<AuctionCategory>();
    private AuctionCategory newCategory = new AuctionCategory();
    private List<Toast> toasts = new List<Toast>();
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();


    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }
    
    private void CloseToast(Toast toast)
    {
        toasts.Remove(toast);
        InvokeAsync(StateHasChanged);
    }
    
    
    private async Task LoadCategories()
    {
        var response = await Http.GetAsync($"/Auctions/Categories");
        var content = await response.Content.ReadAsStringAsync();
        
        if (response.IsSuccessStatusCode)
        {
            categories = JsonSerializer.Deserialize<List<AuctionCategory>>(content, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true, // Make property names case-insensitive
                Converters = { new JsonStringEnumConverter() } // Handle enum serialization/deserialization
            });
        }
    }
    
    private async Task DeleteCategory(string name)
    {
        var response = await Http.DeleteAsync($"/Auctions/Categories/{name}");
        var content = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {
            toasts.Add(new Toast { Type = "success", Show = "page", Message = "Category was successfully deleted" });
            await LoadCategories();
        }
        else
        {
            toasts.Add(new Toast { Type = "danger", Show = "page", Message = content });
        }
       
    }
    
    private async Task AddCategory(AuctionCategory category)
    {
        var response = await Http.PostAsJsonAsync($"/Auctions/Categories", category);
        var content = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {
            toasts.Add(new Toast { Type = "success", Show = "page", Message = "Category was successfully added" });
            await LoadCategories();
            
        }
        else
        {
            toasts.Add(new Toast { Type = "danger", Show = "page", Message = content });
        }
    }

}